// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    And(a=address[14], b=address[13], out=probablekbaccess);

    // Determine if invalid address
    Or8Way(in=address[0..7], out=temp1);
    Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=temp2);
    Or(a=temp1, b=temp2, out=invalidaccess);
    Not(in=invalidaccess, out=validaccess1);

    // Determine if keyboard access
    And(a=probablekbaccess, b=validaccess1, out=keyboardaccess1);
    And(a=keyboardaccess1, b=load, out=keyboardaccess);

    // Determine if screen accees
    Not(in=address[13], out=temp3);
    And(a=address[14], b=temp3, out=temp4);
    And(a=temp4, b=load, out=screenaccess);

    // Determine if RAM access
    Not(in=address[14], out=ramaccess1);
    And(a=ramaccess1, b=load, out=ramaccess);

    // set RAM if ramacess
    RAM16K(in=in, load=ramaccess, address=address[0..13], out=out1);

    // set SCREEN if screenaccess
    DMux(in=screenaccess, sel=address[12], a=screenaccess1, b=screenaccess2);
    RAM4K(in=in, load=screenaccess1, address=address[0..11], out=out2);
    RAM4K(in=in, load=screenaccess2, address=address[0..11], out=out3);
    Mux16(a=out2, b=out3, sel=address[12], out=out4);

    // set Keyboard if keyboardaccess
    Register(in=in, load=keyboardaccess, out=out5);

    // select between multiple outputs
    Mux4Way16(a=out1, b=out1, c=out4, d=out5, sel=address[13..14], out=out);
}